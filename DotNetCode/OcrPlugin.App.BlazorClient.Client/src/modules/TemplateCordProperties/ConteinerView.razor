@using OcrPlugin.App.BlazorClient.Client.src.Shared.components;
@using System.Drawing
@using System.IO
@using OcrPlugin.App.BlazorClient.Client.Common
@using OcrPlugin.App.BlazorClient.Client.DTOs
@using OcrPlugin.App.BlazorClient.Client.Utils.RouteHelper
@using OcrPlugin.App.BlazorClient.Client.src.Shared.layout.main

@inject OcrApi _ocrApi
@inject IHttpWrapper _httpWrapper
@inject ILocalSessionService _localSessionService

<Styled @bind-Classname="@_className">
    display: flex;
    background: linear-gradient(133deg, rgb(0, 188, 195) 0%, rgb(107, 63, 228) 100%);
    margin: auto auto auto 25px;
    min-height: 100vh;
</Styled>

<Styled @bind-Classname="@_element">
    background: white;
    border-radius: 10px;
    height: 96vh;
    margin: 17px;
</Styled>

<div class="@_className">
    <DocumentPreview InheritedClass="@_element"
                     Template="@Template"
                     @ref="@_documentPreview"
    />
    <PropertySelector InheritedClass="@_element"
                      Template="@Template"
                      OnClickCallback="@(args => PropertyChanged(args.Item1,args.Item2))"
                      OcrProperties="@(async () => await OcrProperties())"
    />
    <CheckProperties InheritedClass="@_element"
                     Template="@Template"
                     SaveTemplate="@(async () => await SaveTemplate())"
                     @ref="@_checkProperties"
    />
</div>

@code {
    private string _className, _element;
    private DocumentPreview _documentPreview;
    private CheckProperties _checkProperties;
    string userData;

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter]
    public Template Template { get; set; }

    protected override async void OnInitialized()
    {
        userData = await _localSessionService.GetJwtToken();
    }

    private void PropertyChanged(string propertyName, bool shouldSave)
    {
        _documentPreview.SetSelectedProperty(propertyName, shouldSave);
    }

    private async Task OcrProperties()
    {
        _checkProperties.SetLoading();
        var ocredProperties = await _ocrApi.ValidateProperties(Template);
        _checkProperties.UpdateProperties(ocredProperties);
    }

    private async Task SaveTemplate()
    {
        var confirmationModal = Modal.Show<ConfirmationModal>(
            title: "Czy na pewno chcesz zapisaÄ‡ szablon?",
            options: new ModalOptions
            {
                Animation = ModalAnimation.FadeIn(0.3),
                DisableBackgroundCancel = true,
                HideCloseButton = true
            });
        var result = await confirmationModal.Result;

        if (result.Cancelled)
        {
            return;
        }
        else
        {
            await _httpWrapper.PostAsJsonAsync("api/templates/update", Template);
        }

        StateHasChanged();
    }
}