@using OcrPlugin.App.BlazorClient.Client.Utils.RouteHelper
@using OcrPlugin.App.BlazorClient.Client.Common.TokenService
@using OcrPlugin.App.BlazorClient.Client.DTOs
@using OcrPlugin.App.BlazorClient.Client.Common
@implements IAsyncDisposable

@inject IJSRuntime JSRuntime
@inject SomethingChangedEvent _somethingChangedEvent
@inject TokenService _tokenService
@inject BlobUriBuilder _blobUriBuilder
@inject OcrApi _ocrApi;
@inject NavigationManager _navigation

<Styled @bind-Classname="@_documentPreview">
    min-width: 1090px;
    max-width: 1090px;
    flex-grow: 14;
    background: white;
    border-radius: 10px;
    display: flex;
    flex-direction: column;

    input[type="file"] {
    display: none;
    }
</Styled>

<Styled>
    .hover-input {
    animation-iteration-count: 1;
    opacity: 0.8;
    -webkit-transform: translateY(-1em);
    transform: translateY(-1em);

    -webkit-transition-duration: 0.5s;
    -moz-transition-duration: 0.5s;
    transition-duration: 0.5s;
    }
</Styled>

<Styled @bind-Classname="@_customFileUpload">
    border: 1px solid #ccc;
    display: inline-block;
    padding: 6px 12px;
    cursor: pointer;
    width: 58em;
    height: 30em;
    text-align: center;
    margin: 50px auto 0px auto;
    border: 5px dotted #8484CA;
    display: flex;
    flex-direction: column;
</Styled>

<Styled @bind-Classname="@_upperIcon">
    display: inline-block;
</Styled>

<Styled @bind-Classname="@_upperText">
    margin: auto;
    text-align: center;
    font-weight: bold;
    color: #5355AF;
    font-size: 45px;
    white-space: nowrap;
    display: inline-block;
    align-self: flex-end;
    letter-spacing: 3px;
</Styled>

<Styled @bind-Classname="@_middleText">
    margin: auto;
    text-align: center;
    color: #5355AF;
    font-size: 35px;
    white-space: nowrap;
    display: inline-block;
    align-self: flex-end;
</Styled>

<Styled @bind-Classname="@_bottomButton">
    margin: auto 3.5em;
    text-align: center;
    font-weight: bold;
    color: #5355AF;
    font-size: 35px;
    white-space: nowrap;
    display: inline-block;
    align-self: flex-end;

    background: #5355AF;
    color: white;
    font-weight: bold;
    padding: 5px;
    border-radius: 12px;
    border-width: 0px;
    width: -webkit-fill-available;
    box-sizing: content-box;
    height: 40px;
</Styled>

<Styled ClassName="@_bottomButton" PseudoClass="PseudoClasses.Hover">
    background: rgb(0, 188, 195);
</Styled>

<Styled ClassName="@_bottomButton" PseudoClass="PseudoClasses.Before">
    margin:0 0 0 5px;
    transform:scaleX(-1);
</Styled>

<Styled @bind-Classname="@_buttonOcr">
    cursor: pointer;
    align-items: center;
    align-self: center;
    background: rgb(62,87,239);
    background: linear-gradient(90deg, rgba(62,87,239,1) 0%, rgba(0,238,170,1) 100%);
    border-radius: 50px;
    border-width: 0px;
    box-sizing: content-box;
    color: white;
    display: inline-block;
    flex-direction: column;
    font-size: 75px;
    font-weight: bold;
    height: 1em;
    margin: auto 3.5em;
    padding: 5px;
    text-align: center;
    white-space: nowrap;
    width: 4.5em;
</Styled>

<Styled @bind-Classname="@_buttonOcrDisabled">
    cursor: inherit !important;
    background: linear-gradient(90deg, rgba(62,87,239,0.2) 0%, rgba(0,238,170,0.2) 100%);
</Styled>


<div class="@InheritedClass @_documentPreview">
    <label @ref="_fileDropContainer" for="file-upload" class="@_customFileUpload">

        <div class="@_upperIcon">
            <OcrIconFly IconName="ocr-upload-icon" Height="220" Width="220" Margin="20px auto"/>
        </div>
        <div class="@_upperText">Przeciągnij i upuść tutaj</div>
        <div class="@_middleText">lub</div>
        <div class="@_bottomButton">Wczytaj pliki z komputera</div>
    </label>

    <InputFile id="file-upload" class="custom-file-input" OnChange="@OnChange" multiple @ref="@_inputFile"></InputFile>

    <button class="@_buttonOcr @(IsThereAnyFileLoaded ? "" : _buttonOcrDisabled)" @onclick="@OnClick" disabled="@(!IsThereAnyFileLoaded)">
        OCR
    </button>
</div>

@code {
    [Parameter]
    public string InheritedClass { get; set; }

    [Parameter]
    public Func<IEnumerable<IBrowserFile>, Task> LoadFiles { get; set; }

    [Parameter]
    public Func<Task> InitOcr { get; set; }

    [Parameter]
    public bool IsThereAnyFileLoaded { get; set; }

    private ElementReference _fileDropContainer;
    private InputFile _inputFile;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", _fileDropContainer, _inputFile.Element);
        }
    }

    private string _documentPreview, _customFileUpload, _upperIcon, _upperText, _middleText, _bottomButton, _buttonOcr, _buttonOcrDisabled;

    private async Task OnChange(InputFileChangeEventArgs e)
    {
        await LoadFiles(e.GetMultipleFiles(1000).ToList());

        StateHasChanged();
    }

    private static async Task<byte[]> GetFileBytes(IBrowserFile browserFile)
    {
        var buffers = new byte[browserFile.Size];
        await browserFile.OpenReadStream().ReadAsync(buffers);

        return buffers;
    }

    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }

    private async Task OnClick()
    {
        await InitOcr();
    }
}