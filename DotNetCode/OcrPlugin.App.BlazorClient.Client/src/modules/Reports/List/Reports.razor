@page "/reports"
@using OcrPlugin.App.BlazorClient.Client.Utils.RouteHelper
@using OcrPlugin.App.BlazorClient.Shared.Reports
@using OcrPlugin.App.BlazorClient.Client.Common.TokenService
@using OcrPlugin.App.BlazorClient.Client.src.Shared.layout.main
@using OcrPlugin.App.BlazorClient.Client.src.Shared.navbar
@using OcrPlugin.App.BlazorClient.Client.Common
@using OcrPlugin.App.BlazorClient.Client.src.Shared.components.pager

@inject SomethingChangedEvent _somethingChangedEvent
@inject TokenService _tokenService
@inject IHttpWrapper _httpWrapper

<Styled @bind-Classname="@_className">
    display: flex;
    flex-direction: column;
    justify-content: center;
    margin-top: 20px;
</Styled>

<NavBar />
<div class="@_className">
    @if (_isLoading)
    {
        <Loading />
    }
    else
    {
        @if (_filteredReportsChunked.Any())
        {
            var filteredReportsChunk = _filteredReportsChunked.ElementAt(_currentChunk);
            <ReportsTable Reports="filteredReportsChunk"/>

            @if (_filteredReportsChunked.Count > 1)
            {
                <TablePager CurrentPage="@(_currentChunk+1)"
                            PageCount="@_filteredReportsChunked.Count"
                            OnPageChanged="@(async pageNumber => { await FetchData(pageNumber); })"
                            ShowFirstLast="true"
                            ShowPageNumbers="true"
                            VisiblePages="5"
                            FirstText="<<"
                            LastText=">>"
                            NextText=">"
                            PreviousText="<"/>
            }
        }
    }
</div>

@code {
    private string _className;

    private IList<ReportListDto> _reports = new List<ReportListDto>();
    private IList<ReportListDto> _filteredReports = new List<ReportListDto>();
    private IList<ReportListDto[]> _filteredReportsChunked = new List<ReportListDto[]>();
    private int _currentChunk = 0;
    private bool _isLoading = true;

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _tokenService.CheckIfTokenIsNotExpired();
        Layout.SiteMenuCollapsed = false;
        await _somethingChangedEvent.Notify(SomethingChangedEventType.Route, null);
        _somethingChangedEvent.Changed += (eventType, value) => eventType == SomethingChangedEventType.Search ? OnSearchChanged(value) : Task.CompletedTask;

        var requestMsg = new HttpRequestMessage(HttpMethod.Get, "api/Reports");
        _filteredReports = _reports = await _httpWrapper.GetAsync<IList<ReportListDto>>(requestMsg, _ => ValueTask.CompletedTask);

        if (_filteredReports != null)
        {
            _filteredReportsChunked = _filteredReports.Chunk(15).ToList();
        }

        _isLoading = false;
        await base.OnInitializedAsync();
    }

    private async Task OnSearchChanged(string value)
    {
        _currentChunk = 0;

        var valueUpper = value.ToUpperInvariant();

        _filteredReportsChunked = _reports.Where(c
            => c.TemplateName?.ToUpperInvariant().Contains(valueUpper) == true
               || c.Id.Contains(value)
               || c.NumberOfFiles.ToString().Contains(value)
               || c.DateTime.ToString().Contains(value)
               || c.UserName.ToUpperInvariant().ToString().Contains(valueUpper)
            ).Chunk(15).ToList();

        StateHasChanged();
        await Task.CompletedTask;
    }

    private Task FetchData(int page)
    {
        _currentChunk = page-1;
        StateHasChanged();

        return Task.CompletedTask;
    }
}